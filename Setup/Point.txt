1. const App = (props) => {
      return <h1>Hello</h1>
   }
   - This is stateless component function
   - This will render same results except that this component will have no state.
2. <h1>Hello</h1> as jSX works like --
    React.createElement('h1', null, 'Hello'); --(Element, Props, InnerText)
3. React Component can return only one node.
    return <h1>Hello</h1> <b>World</b1>
    Won't work as: we are returning two functions which doesn't translate to Javascript.

    Will need to enclose them in brackets as:
    return (
    <div>
      <h1>Hello</h1>
      <b>World</b>
    </div>
    );
4. Whenever a new state is set component view is updated. You can also check for if it should update using
   shouldComponentUpdate(nextProps, nextState) function.
5. How JSX work ?
   const App = (props) => {
      var myStyle = {
        backgroundColor: '#000',
        height: 10
      }
      return (
          <div style={myStyle}>
              <a
              href="#"
              not-rendered="x"
              onClick={update}>
              {/* this is a comment*/}
              this is the text
              { i > 1 ? 'more than one' : 'one'}
              { i > 1 && 'more than one'}
              </a>
          </div>
      );
   }

O/P:= (Babel adds comments at the last)

  var App = function App(props) {
      return React.createElement(
        "div",
        { style: myStyle },
        React.createElement("a", {
          href: "#",
          not-rendered: "x"
          onClick: update
        }, "this is the text", i > 1 ? "more than one" : "one", i > 1 && "more than one")
      );
  }
  /* this is a comment*/
6. Developer Tools
   React Developer Tools is available as an add-on in Chrome Web Store.
   You can see the difference of Virtual DOM and actual DOM in actual debugging and React tools.
